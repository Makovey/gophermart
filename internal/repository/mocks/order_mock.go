// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Makovey/gophermart/internal/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderServiceRepository is a mock of OrderServiceRepository interface.
type MockOrderServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceRepositoryMockRecorder
}

// MockOrderServiceRepositoryMockRecorder is the mock recorder for MockOrderServiceRepository.
type MockOrderServiceRepositoryMockRecorder struct {
	mock *MockOrderServiceRepository
}

// NewMockOrderServiceRepository creates a new mock instance.
func NewMockOrderServiceRepository(ctrl *gomock.Controller) *MockOrderServiceRepository {
	mock := &MockOrderServiceRepository{ctrl: ctrl}
	mock.recorder = &MockOrderServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceRepository) EXPECT() *MockOrderServiceRepositoryMockRecorder {
	return m.recorder
}

// GetOrderByID mocks base method.
func (m *MockOrderServiceRepository) GetOrderByID(ctx context.Context, orderID string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderServiceRepositoryMockRecorder) GetOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderServiceRepository)(nil).GetOrderByID), ctx, orderID)
}

// GetOrders mocks base method.
func (m *MockOrderServiceRepository) GetOrders(ctx context.Context, userID string) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderServiceRepositoryMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderServiceRepository)(nil).GetOrders), ctx, userID)
}

// PostNewOrder mocks base method.
func (m *MockOrderServiceRepository) PostNewOrder(ctx context.Context, orderID, status, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostNewOrder", ctx, orderID, status, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostNewOrder indicates an expected call of PostNewOrder.
func (mr *MockOrderServiceRepositoryMockRecorder) PostNewOrder(ctx, orderID, status, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostNewOrder", reflect.TypeOf((*MockOrderServiceRepository)(nil).PostNewOrder), ctx, orderID, status, userID)
}
