// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Makovey/gophermart/internal/transport/http/model"
	gomock "github.com/golang/mock/gomock"
)

// MockGophermartService is a mock of GophermartService interface.
type MockGophermartService struct {
	ctrl     *gomock.Controller
	recorder *MockGophermartServiceMockRecorder
}

// MockGophermartServiceMockRecorder is the mock recorder for MockGophermartService.
type MockGophermartServiceMockRecorder struct {
	mock *MockGophermartService
}

// NewMockGophermartService creates a new mock instance.
func NewMockGophermartService(ctrl *gomock.Controller) *MockGophermartService {
	mock := &MockGophermartService{ctrl: ctrl}
	mock.recorder = &MockGophermartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophermartService) EXPECT() *MockGophermartServiceMockRecorder {
	return m.recorder
}

// GetOrders mocks base method.
func (m *MockGophermartService) GetOrders(ctx context.Context, userID string) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockGophermartServiceMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockGophermartService)(nil).GetOrders), ctx, userID)
}

// LoginUser mocks base method.
func (m *MockGophermartService) LoginUser(ctx context.Context, request model.AuthRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockGophermartServiceMockRecorder) LoginUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockGophermartService)(nil).LoginUser), ctx, request)
}

// ProcessNewOrder mocks base method.
func (m *MockGophermartService) ProcessNewOrder(ctx context.Context, userID, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNewOrder", ctx, userID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessNewOrder indicates an expected call of ProcessNewOrder.
func (mr *MockGophermartServiceMockRecorder) ProcessNewOrder(ctx, userID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNewOrder", reflect.TypeOf((*MockGophermartService)(nil).ProcessNewOrder), ctx, userID, orderID)
}

// RegisterNewUser mocks base method.
func (m *MockGophermartService) RegisterNewUser(ctx context.Context, request model.AuthRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewUser", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNewUser indicates an expected call of RegisterNewUser.
func (mr *MockGophermartServiceMockRecorder) RegisterNewUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewUser", reflect.TypeOf((*MockGophermartService)(nil).RegisterNewUser), ctx, request)
}

// ValidateOrderID mocks base method.
func (m *MockGophermartService) ValidateOrderID(orderID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOrderID", orderID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateOrderID indicates an expected call of ValidateOrderID.
func (mr *MockGophermartServiceMockRecorder) ValidateOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOrderID", reflect.TypeOf((*MockGophermartService)(nil).ValidateOrderID), orderID)
}
