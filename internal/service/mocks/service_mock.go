// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Makovey/gophermart/internal/transport/http/model"
	gomock "github.com/golang/mock/gomock"
)

// MockGophermartService is a mock of GophermartService interface.
type MockGophermartService struct {
	ctrl     *gomock.Controller
	recorder *MockGophermartServiceMockRecorder
}

// MockGophermartServiceMockRecorder is the mock recorder for MockGophermartService.
type MockGophermartServiceMockRecorder struct {
	mock *MockGophermartService
}

// NewMockGophermartService creates a new mock instance.
func NewMockGophermartService(ctrl *gomock.Controller) *MockGophermartService {
	mock := &MockGophermartService{ctrl: ctrl}
	mock.recorder = &MockGophermartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophermartService) EXPECT() *MockGophermartServiceMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockGophermartService) RegisterUser(ctx context.Context, request model.AuthRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockGophermartServiceMockRecorder) RegisterUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockGophermartService)(nil).RegisterUser), ctx, request)
}
